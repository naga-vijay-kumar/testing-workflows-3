var enqueuedJobs = stream
  |from()
    .database('cre-freshdesk')
    .measurement('cre_cf_sidekiq_queue_monitoring')
  |where(lambda: "account_id" == '905208' AND "payload_type" == 'job_enqueued' AND "queue_name" == 'tickets_export_queue')
  |derivative('counter')
    .unit(10m)
    .nonNegative()
    .as('enqueuedJobs')
  |window()
    .period(5m)
    .every(5m)
  |mean('enqueuedJobs')
    .as('enqueuedJobs')


var pickedUpJobs = stream
  |from()
    .database('cre-freshdesk')
    .measurement('cre_cf_sidekiq_queue_monitoring')
  |where(lambda: "account_id" == '905208' AND "payload_type" == 'job_picked_up' AND "queue_name" == 'tickets_export_queue')
  |derivative('counter')
    .unit(10m)
    .nonNegative()
    .as('pickedUpJobs')
  |window()
    .period(5m)
    .every(5m)
  |mean('pickedUpJobs')
    .as('pickedUpJobs')


enqueuedJobs
  |join(pickedUpJobs)
    .as('enqueuedJobs', 'pickedUpJobs')
    .tolerance(1s)
    .fill(0.0)
    .streamName('difference')
  |eval(lambda: "enqueuedJobs.value" - "pickedUpJobs.value")
    .as('difference')
  |stateDuration(lambda: "difference" > 0)
    .unit(1m)
  |alert()
    .message('[ {{ .Time }} ] [dish_ticket_exports_unprocessed_jobs_alert] [ There is a delay in tickets export job getting picked up to be processed for last 10 min  ] {{ .Level }}')
    .warn(lambda: "state_duration" >= 10)
    .warnReset(lambda: "state_duration" == 0)
    .stateChangesOnly()
    .topic('cre-freshdesk')