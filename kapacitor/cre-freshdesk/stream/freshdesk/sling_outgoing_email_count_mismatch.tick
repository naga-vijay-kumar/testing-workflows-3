var acceptReceipt = stream
  |from()
    .database('cre-freshdesk')
    .measurement('cre_cf_sherlock_outgoing_email_events_total')
  |where(lambda: "account_id" == '686961' AND "payload_type" == 'outgoing_email_accept_receipt')
  |derivative('counter')
    .unit(10m)
    .nonNegative()
    .as('acceptReceipt')
  |window()
    .period(5m)
    .every(5m)
  |mean('acceptReceipt')
    .as('acceptReceipt')


var successReceipt = stream
  |from()
    .database('cre-freshdesk')
    .measurement('cre_cf_sherlock_outgoing_email_events_total')
  |where(lambda: "account_id" == '686961' AND "payload_type" == 'outgoing_email_success_receipt')
  |derivative('counter')
    .unit(10m)
    .nonNegative()
    .as('successReceipt')
  |window()
    .period(5m)
    .every(5m)
  |mean('successReceipt')
    .as('successReceipt')

var failureReceipt = stream
  |from()
    .database('cre-freshdesk')
    .measurement('cre_cf_sherlock_outgoing_email_events_total')
  |where(lambda: "account_id" == '686961' AND "payload_type" == 'outgoing_email_failure_receipt')
  |derivative('counter')
    .unit(10m)
    .nonNegative()
    .as('failureReceipt')
  |window()
    .period(5m)
    .every(5m)
  |mean('failureReceipt')
    .as('failureReceipt')


acceptReceipt
  |join(successReceipt, failureReceipt)
    .as('acceptReceipt', 'successReceipt', 'failureReceipt')
    .tolerance(1s)
    .fill(0.0)
    .streamName('count_mismatch')
  |eval(lambda: "acceptReceipt.value" - "successReceipt.value" + "failureReceipt.value")
    .as('count_mismatch')
  |stateDuration(lambda: "count_mismatch" > 0)
    .unit(1m)
  |alert()
    .message('[ {{ .Time }} ] [sling_outgoing_email_count_mismatch] [ The difference in number of outgoing email accept events and events delivered as success and failure above 0 for last 10 mins ] [Current diff] {{ index .Fields "count_mismatch" }} {{ .Level }}')
    .warn(lambda: "state_duration" >= 10)
    .warnReset(lambda: "state_duration" == 0)
    .stateChangesOnly()
    .topic('cre-freshdesk')