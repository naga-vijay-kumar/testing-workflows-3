var mem_used = stream
  |from()
      .database('staging-freshchat')
      .measurement('kubernetes_pod_container')
      .where(lambda: isPresent("memory_working_set_bytes") AND ("namespace" == 'fc-java' OR "namespace" == 'fc-kube' OR "namespace" == 'monitoring'))
      .groupBy('region','k8s_cluster_name','namespace','pod_name','container_name')
  |window()
    .period(5m)
    .every(1m)
  |mean('memory_working_set_bytes')
    .as('mean')

var mem_limit = stream
  |from()
      .database('staging-freshchat')
      .measurement('kube_state_metrics')
      .where(lambda: isPresent("kube_pod_container_resource_limits_memory_bytes") AND ("namespace" == 'fc-java' OR "namespace" == 'fc-kube' OR "namespace" == 'monitoring'))
  |eval(lambda: "pod")
      .as('pod_name')
      .keep('kube_pod_container_resource_limits_memory_bytes')
      .tags('pod_name')
  |eval(lambda: "container")
      .as('container_name')
      .keep('kube_pod_container_resource_limits_memory_bytes')
      .tags('container_name')
  |groupBy('region','k8s_cluster_name','namespace','pod_name','container_name')
  |window()
    .period(5m)
    .every(1m)  
  |mean('kube_pod_container_resource_limits_memory_bytes')
    .as('mean')

mem_used
  |join(mem_limit)
    .as('mem_used','mem_limit')
  |eval(lambda: (("mem_used.mean")/"mem_limit.mean")*100.0)
    .as('mem_used_percent')
  |alert()
    .message('[ {{ .Time }} ] [ {{ index .Tags "region" }} ] [ {{ index .Tags "k8s_cluster_name" }} ] [ {{ index .Tags "namespace" }} ][ {{ index .Tags "pod_name" }} ] [ {{ index .Tags "container_name" }} ] [ high_memory_usage_in_k8s_pod ] - {{ index .Fields "mem_used_percent" }} {{ .Level }}')
    .id('{{ .Name }}:{{ .Group }}/high_memory_usage_in_k8s_pod')
    .warn(lambda: "mem_used_percent" > 85)
    .warnReset(lambda: "mem_used_percent" <= 80)
    .crit(lambda: "mem_used_percent" > 90)
    .critReset(lambda: "mem_used_percent" <= 85)
    .stateChangesOnly()
    .topic('staging-freshchat')