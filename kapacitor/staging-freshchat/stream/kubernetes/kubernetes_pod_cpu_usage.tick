var cpu_used = stream
  |from()
      .database('staging-freshchat')
      .measurement('kubernetes_pod_container')
      .where(lambda: isPresent("cpu_usage_nanocores") AND ("namespace" == 'fc-java'))
      .groupBy('region','k8s_cluster_name','namespace','pod_name','container_name')
  |window()
    .period(5m)
    .every(1m)
    .align()
  |mean('cpu_usage_nanocores')
    .as('mean')
  |eval(lambda: "mean" / 1000000.0)
    .as('mean')

var cpu_limit = stream
  |from()
      .database('staging-freshchat')
      .measurement('kube_state_metrics')
      .where(lambda: isPresent("kube_pod_container_resource_limits_cpu_cores") AND ("namespace" == 'fc-java'))
  |eval(lambda: string("pod"))
      .as('pod_name')
      .keep('kube_pod_container_resource_limits_cpu_cores')
      .tags('pod_name')
  |eval(lambda: string("container"))
      .as('container_name')
      .keep('kube_pod_container_resource_limits_cpu_cores')
      .tags('container_name')
  |eval(lambda: "kube_pod_container_resource_limits_cpu_cores" * 1000.0 )
      .as('kube_pod_container_resource_limits_cpu_millicores')
  |groupBy('region','k8s_cluster_name','namespace','pod_name','container_name')
  |window()
    .period(5m)
    .every(1m)
    .align()
  |mean('kube_pod_container_resource_limits_cpu_millicores')
    .as('mean') 

cpu_used
  |join(cpu_limit)
    .as('cpu_used','cpu_limit')
  |eval(lambda: (("cpu_used.mean")/"cpu_limit.mean")*100.0)
    .as('cpu_used_percent')
  |stateCount(lambda: isPresent("cpu_used_percent"))
  |alert()
    .message('[ {{ .Time }} ] [ {{ index .Tags "region" }} ] [ {{ index .Tags "k8s_cluster_name" }} ] [ {{ index .Tags "namespace" }} ][ {{ index .Tags "pod_name" }} ] [ {{ index .Tags "container_name" }} ] [ high_cpu_usage_in_k8s_pod ] - {{ index .Fields "cpu_used_percent" }} {{ .Level }}')
    .id('{{ .Name }}:{{ .Group }}/high_cpu_usage_in_k8s_pod')
    .warn(lambda: "cpu_used_percent" > 65 AND "state_count" > 5)
    .warnReset(lambda: "cpu_used_percent" <= 60  AND "state_count" > 5)
    .crit(lambda: "cpu_used_percent" > 75  AND "state_count" > 5)
    .critReset(lambda: "cpu_used_percent" <= 70  AND "state_count" > 5)
    .stateChangesOnly()
    .topic('staging-freshchat')