var http_5xx_rate = stream
    |from()
        .database('freshchat')
        .measurement('haproxy')
        .where(lambda: "type" == 'frontend')
        .groupBy('region','cluster','host','proxy')
    |derivative('http_response.5xx')
        .unit(1s)
        .nonNegative()
        .as('5xx_rate')
    |window()
        .period(5m)
        .every(1m)
        .align()
    |mean('5xx_rate')
        .as('mean')

var http_4xx_rate = stream
    |from()
        .database('freshchat')
        .measurement('haproxy')
        .where(lambda: "type" == 'frontend')
        .groupBy('region','cluster','host','proxy')
    |derivative('http_response.4xx')
        .unit(1s)
        .nonNegative()
        .as('4xx_rate')
    |window()
        .period(5m)
        .every(1m)
        .align()
    |mean('4xx_rate')
        .as('mean')


http_5xx_rate
    |join(http_4xx_rate)
        .as('http_5xx_rate', 'http_4xx_rate')
    |eval(lambda: "http_5xx_rate.mean" + "http_4xx_rate.mean")
        .as('total_error_rate')
        .keep('total_error_rate', 'http_5xx_rate.mean', 'http_4xx_rate.mean')
    |alert()
    	.message('[ {{ .Time }} ] [ {{ index .Tags "region" }} ] [ {{ index .Tags "cluster" }} ] [ {{ index .Tags "host" }} ] [ {{ index .Tags "proxy" }} ]  [ haproxy_frontend_error_rate ] - {{ index .Fields "total_error_rate" }}, 5xx_rate:{{ index .Fields "http_5xx_rate.mean" }} 4xx_rate:{{ index .Fields "http_4xx_rate.mean" }} {{ .Level }}')
    	.id('{{ .Name }}:{{ .Group }}/haproxy_frontend_error_rate')
        .crit(lambda: "total_error_rate" > 10)
        .critReset(lambda: "total_error_rate" <= 7)
        .warn(lambda: "total_error_rate" > 7)
        .warnReset(lambda: "total_error_rate" <= 5)
	    .stateChangesOnly()
	    .topic('freshchat')