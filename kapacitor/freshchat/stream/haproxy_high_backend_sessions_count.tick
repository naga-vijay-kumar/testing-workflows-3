var current_sessions = stream
    |from()
        .database('freshchat')
        .measurement('haproxy')
        .where(lambda: "type" == 'backend')
        .groupBy('region','cluster','host')
    |window()
        .period(5m)
        .every(1m)
        .align()
    |mean('scur')
        .as('mean_value')

var sessions_limit = stream
    |from()
        .database('freshchat')
        .measurement('haproxy')
        .where(lambda: "type" == 'backend')
        .groupBy('region','cluster','host')
    |window()
        .period(5m)
        .every(1m)
        .align()
    |mean('slim')
        .as('mean_value')

current_sessions
    |join(sessions_limit)
        .as('current_sessions', 'sessions_limit')
    |eval(lambda: ("current_sessions.mean_value"/"sessions_limit.mean_value")*100.0)
        .as('pct_sessions_used')
    |alert()
    	.message('[ {{ .Time }} ] [ {{ index .Tags "region" }} ] [ {{ index .Tags "cluster" }} ] [ {{ index .Tags "host" }} ] [ haproxy_high_backend_sessions_count ] - {{ index .Fields "pct_sessions_used" }}% sessions {{ .Level }}')
    	.id('{{ .Name }}:{{ .Group }}/haproxy_high_backend_sessions_count')
        .crit(lambda: "pct_sessions_used" > 80)
        .critReset(lambda: "pct_sessions_used" <= 75)
        .warn(lambda: "pct_sessions_used" > 50)
        .warnReset(lambda: "pct_sessions_used" <= 45)
	    .stateChangesOnly()
	    .topic('freshchat')