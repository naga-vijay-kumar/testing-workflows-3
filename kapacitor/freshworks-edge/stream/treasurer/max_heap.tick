var max_heap = stream
    |from()
        .database('freshworks-edge')
        .measurement('jvm_memory_max_bytes')
    |where(lambda: 'application' == 'treasurer' AND 'area' == 'heap')
    |combine(lambda: "id" == 'Eden Space', lambda: "id" == 'Tenured Gen', lambda: "id" == 'Survivor Space')
        .as('eden', 'tenured', 'survivor')
        .tolerance(2s)
        .delimiter('.')
    |groupBy('region','k8s_cluster_name', 'namespace', 'host')
    |window()
        .period(10m)
        .every(1m)
    |eval(lambda: "eden.gauge" + "tenured.gauge" + "survivor.gauge").as('heapsize')
    |mean('heapsize')
        .as('size')
var used_heap = stream
    |from()
        .database('freshworks-edge')
        .measurement('jvm_memory_used_bytes')
    |where(lambda: 'application' == 'treasurer' AND 'area' == 'heap')
    |combine(lambda: "id" == 'Eden Space', lambda: "id" == 'Tenured Gen', lambda: "id" == 'Survivor Space')
        .as('eden', 'tenured', 'survivor')
        .tolerance(2s)
        .delimiter('.')
    |groupBy('region','k8s_cluster_name', 'namespace', 'host')
    |window()
        .period(10m)
        .every(1m)
    |eval(lambda: "eden.gauge" + "tenured.gauge" + "survivor.gauge").as('heapsize')
    |mean('heapsize')
        .as('size')

used_heap
    |join(max_heap).as('used', 'max').tolerance(2s)
    |eval(lambda: ("used.size" * 100 / "max.size" )).as('used_percent')
    |alert()
        .message('[ {{ .Time }} ] [ {{ index .Tags "region" }} ] [ {{ index .Tags "k8s_cluster_name" }} ] [ {{ index .Tags "namespace" }} ] [ {{ index .Tags "host" }} ] [ max_heap ] - {{ index .Fields "used_percent" }}% {{ .Level }}')
        .crit(lambda: "used_percent" >= 90)
        .critReset(lambda: "used_percent" < 90)
        .id('{{ .Name }}:{{ .Group }}/max_heap')
        .stateChangesOnly()
        .topic('freshworks-edge')